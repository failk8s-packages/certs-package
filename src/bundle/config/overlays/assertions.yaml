#@ load("@ytt:data", "data")
#@ load("@ytt:assert", "assert")

#@ if data.values.certmanager.namespace:
#@   data.values.certmanager.namespace!="REPLACE_ME" or assert.fail("data.values.certmanager.namespace can not be empty or REPLACE_ME")
#@ else:
#@   assert.fail("data.values.certmanager.namespace can not be empty or REPLACE_ME")
#@ end

#@ if data.values.ingress.namespace:
#@   data.values.ingress.namespace!="REPLACE_ME" or assert.fail("data.values.ingress.namespace can not be empty or REPLACE_ME")
#@ else:
#@   assert.fail("data.values.ingress.namespace can not be empty or REPLACE_ME")
#@ end

#@ if data.values.ingress.ingress_class:
#@   data.values.ingress.ingress_class!="REPLACE_ME" or assert.fail("data.values.ingress.ingress_class can not be empty or REPLACE_ME")
#@ else:
#@   assert.fail("data.values.ingress.ingress_class can not be empty or REPLACE_ME")
#@ end

#@ if data.values.domain:
#@   data.values.domain!="REPLACE_ME" or assert.fail("data.values.domain can not be empty or REPLACE_ME")
#@ else:
#@   assert.fail("data.values.domain can not be empty or REPLACE_ME")
#@ end

#@ if data.values.wildcard_domain:
#@   data.values.wildcard_domain!="REPLACE_ME" or assert.fail("data.values.wildcard_domain can not be empty or REPLACE_ME")
#@ else:
#@   assert.fail("data.values.wildcard_domain can not be empty or REPLACE_ME")
#@ end

#@ data.values.certs_use=="aws" or data.values.certs_use=="local_ca" or data.values.certs_use=="provided" or assert.fail("values.domain.certs_use accepted values are: aws, local_ca, provided")

#@ if data.values.certs_use=="local_ca":
#@   data.values.local.root_ca.crt or assert.fail("missing local.root_ca.crt definition")
#@   data.values.local.root_ca.key or assert.fail("missing local.root_ca.key definition")
#@ end

#@ if data.values.certs_use=="aws":
#@ if data.values.aws.access_key_id:
#@   data.values.aws.access_key_id!="REPLACE_ME" or assert.fail("data.values.aws.access_key_id can not be empty or REPLACE_ME")
#@ else:
#@   assert.fail("data.values.aws.access_key_id can not be empty or REPLACE_ME")
#@ end
#@ if data.values.aws.secret_access_key:
#@   data.values.aws.secret_access_key!="REPLACE_ME" or assert.fail("data.values.aws.secret_access_key can not be empty or REPLACE_ME")
#@ else:
#@   assert.fail("data.values.aws.secret_access_key can not be empty or REPLACE_ME")
#@ end
#@ end

#@ if data.values.certs_use=="provided":
#@ if data.values.provided.wildcard_tls.crt:
#@   data.values.provided.wildcard_tls.crt!="REPLACE_ME" or assert.fail("data.values.provided.wildcard_tls.crt can not be empty or REPLACE_ME")
#@ else:
#@   assert.fail("data.values.provided.wildcard_tls.crt can not be empty or REPLACE_ME")
#@ end
#@ if data.values.provided.wildcard_tls.key:
#@   data.values.provided.wildcard_tls.key!="REPLACE_ME" or assert.fail("data.values.provided.wildcard_tls.key can not be empty or REPLACE_ME")
#@ else:
#@   assert.fail("data.values.provided.wildcard_tls.key can not be empty or REPLACE_ME")
#@ end
#@ end
