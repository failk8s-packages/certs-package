#@ load("@ytt:data", "data")
#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:base64", "base64")

#@ if data.values.certs_use=="aws":

#@ if/end (data.values.aws.auth.iam.access_key_id and data.values.aws.auth.iam.secret_access_key):
---
apiVersion: v1
kind: Secret
metadata:
  name: aws-route53-creds
  namespace: #@ data.values.certmanager.namespace
data:
  aws-credentials: #@ base64.encode(data.values.aws.auth.iam.secret_access_key)

#@overlay/match by=overlay.subset({"kind":"ClusterIssuer", "metadata": {"name": "wildcard"}})
---
spec:
  #@overlay/remove
  selfSigned:
  #@overlay/match missing_ok=True
  acme:
    email: #@ data.values.aws.certs.email
    privateKeySecretRef:
      name: eduk8s-wildcard-acme
    server: https://acme-v02.api.letsencrypt.org/directory
    solvers:
      #@overlay/match by=lambda i,l,r: "dns01" in l
      - dns01:
          route53:
            region: #@ data.values.aws.certs.region
            #@ if (data.values.aws.auth.iam.access_key_id and data.values.aws.auth.iam.secret_access_key):
            accessKeyID: #@ data.values.aws.auth.iam.access_key_id
            secretAccessKeySecretRef:
              name: aws-route53-creds
              key: aws-credentials
            #@ end
      #@overlay/match by=lambda i,l,r: "http01" in l
      - http01:
          ingress:
            class: #@ data.values.ingress.ingress_class

#@overlay/match by=overlay.subset({"kind":"Certificate", "metadata": {"name": "wildcard"}})
---
metadata:
  #@overlay/match missing_ok=True
  namespace: #@ data.values.ingress.namespace
spec:
  #@overlay/replace
  dnsNames:
    -  #@ "*.{}".format(data.values.domain)
    -  #@ "*.{}".format(data.values.wildcard_domain)
#@ end
